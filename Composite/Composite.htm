<!DOCTYPE html>
<html lang="en" dir="ltr">
<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# website: http://ogp.me/ns/website#">
    <meta charset="utf-8">
    <title>Composite</title>

    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="theme-color" content="#19222E" />

                
    <link rel="preload" href="/fonts/PTSans/ptsans-regular_en.woff2?1" as="font" type="font/woff2" crossorigin>
    <link rel="preload" href="/fonts/PTSans/ptsans-bold_en.woff2?1" as="font" type="font/woff2" crossorigin>
        <link rel="preload" href="/fonts/fontello/fontawesome.woff2?15843843" as="font" type="font/woff2" crossorigin>
        <link rel="preconnect dns-prefetch" href="https://cdn.paddle.com">
    <link rel="preconnect dns-prefetch" href="https://www.googletagmanager.com">

    <link rel="alternate" href="https://refactoring.guru/design-patterns/composite" hreflang="x-default"/>
    <link rel="alternate" href="https://refactoring.guru/es/design-patterns/composite" hreflang="es"/>
    <link rel="alternate" href="https://refactoring.guru/fr/design-patterns/composite" hreflang="fr"/>
    <link rel="alternate" href="https://refactoring.guru/ja/design-patterns/composite" hreflang="ja"/>
    <link rel="alternate" href="https://refactoring.guru/ko/design-patterns/composite" hreflang="ko"/>
    <link rel="alternate" href="https://refactoring.guru/pl/design-patterns/composite" hreflang="pl"/>
    <link rel="alternate" href="https://refactoring.guru/pt-br/design-patterns/composite" hreflang="pt-br"/>
    <link rel="alternate" href="https://refactoring.guru/ru/design-patterns/composite" hreflang="ru"/>
    <link rel="alternate" href="https://refactoring.guru/uk/design-patterns/composite" hreflang="uk"/>
    <link rel="alternate" href="https://refactoringguru.cn/design-patterns/composite" hreflang="zh"/>

    <meta name="description" content="Composite is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects.">

    <link rel="canonical" href="https://refactoring.guru/design-patterns/composite"/>

    <link rel="icon" type="image/x-icon" href="/favicon.png"/>

        <meta property="fb:app_id" content="666819623386327"/>
        <meta property="og:type" content="website"/>
        <meta property="og:image" content="https://refactoring.guru/images/refactoring/social/facebook-share-preview.png?id=dbf9e98269595be86eb668f365be6868"/>
    
                    <link rel="stylesheet" href="/css/public-packed.min.css?id=cb3ce0b6e73ccb3f31d8ba160e6aa934">
        <style type="text/css">
                    @font-face{font-family:'PT Sans';font-style:normal;font-weight:400;font-display:swap;src:local("PT Sans"),local("PTSans-Regular"),url(/fonts/PTSans/ptsans-regular_cyrillic-ext.woff2?1) format("woff2");unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F}@font-face{font-family:'PT Sans';font-style:normal;font-weight:400;font-display:swap;src:local("PT Sans"),local("PTSans-Regular"),url(/fonts/PTSans/ptsans-regular_cyrillic.woff2?1) format("woff2");unicode-range:U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116}@font-face{font-family:'PT Sans';font-style:normal;font-weight:400;font-display:swap;src:local("PT Sans"),local("PTSans-Regular"),url(/fonts/PTSans/ptsans-regular_latin-ext.woff2?1) format("woff2");unicode-range:U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF}@font-face{font-family:'PT Sans';font-style:normal;font-weight:400;font-display:swap;src:local("PT Sans"),local("PTSans-Regular"),url(/fonts/PTSans/ptsans-regular_latin.woff2?1) format("woff2");unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}@font-face{font-family:'PT Sans';font-style:normal;font-weight:400;font-display:swap;src:local("PT Sans"),local("PTSans-Regular"),url(/fonts/PTSans/ptsans-regular_en.woff2?1) format("woff2");unicode-range:U+0-FF,U+131,U+142,U+152,U+153,U+2BB,U+2BC,U+2C6,U+2DA,U+2DC,U+420,U+423,U+430,U+438-43A,U+43D,U+440,U+441,U+443,U+44C,U+457,U+2000-206F,U+2074,U+20AA-20AC,U+20B4,U+20B9,U+20BA,U+20BD,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}@font-face{font-family:'PT Sans';font-style:normal;font-weight:700;font-display:swap;src:local("PT Sans Bold"),local("PTSans-Bold"),url(/fonts/PTSans/ptsans-bold_cyrillic-ext.woff2?1) format("woff2");unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F}@font-face{font-family:'PT Sans';font-style:normal;font-weight:700;font-display:swap;src:local("PT Sans Bold"),local("PTSans-Bold"),url(/fonts/PTSans/ptsans-bold_cyrillic.woff2?1) format("woff2");unicode-range:U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116}@font-face{font-family:'PT Sans';font-style:normal;font-weight:700;font-display:swap;src:local("PT Sans Bold"),local("PTSans-Bold"),url(/fonts/PTSans/ptsans-bold_latin-ext.woff2?1) format("woff2");unicode-range:U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF}@font-face{font-family:'PT Sans';font-style:normal;font-weight:700;font-display:swap;src:local("PT Sans Bold"),local("PTSans-Bold"),url(/fonts/PTSans/ptsans-bold_latin.woff2?1) format("woff2");unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}@font-face{font-family:'PT Sans';font-style:normal;font-weight:700;font-display:swap;src:local("PT Sans Bold"),local("PTSans-Bold"),url(/fonts/PTSans/ptsans-bold_en.woff2?1) format("woff2");unicode-range:U+0-FF,U+131,U+142,U+152,U+153,U+2BB,U+2BC,U+2C6,U+2DA,U+2DC,U+420,U+423,U+430,U+438-43A,U+43D,U+440,U+441,U+443,U+44C,U+457,U+2000-206F,U+2074,U+20AA-20AC,U+20B4,U+20B9,U+20BA,U+20BD,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}
            </style>

    
            <script defer src="/js/public.min.js?id=321a61e8ec476c5d446437da17682e14"></script>
        <script defer src="/js/checkout.min.js?id=99abeb20a0a6ea3e31e8b4c004f55435"></script>
            <script defer src="https://cdn.paddle.com/paddle/v2/paddle.js"></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-SR8Y3GYQYC"></script>

    <script type="application/ld+json">
        {"@context": "http://schema.org", "@graph": [{"@type":"Person","@id":"https://refactoring.guru/#founder","name":"Alexander Shvets"},{"@type":"Organization","@id":"https://refactoring.guru/#organization","name":"Refactoring.Guru","description":"Refactoring.Guru makes it easy for you to discover everything you need to know about refactoring, design patterns, SOLID principles, and other smart programming topics.","image":{"@type":"ImageObject","@id":"https://refactoring.guru/#organizationlogo","url":"https://refactoring.guru/images/content-public/logos/logo-plain.png","caption":"Refactoring.Guru"},"logo":{"@id":"https://refactoring.guru/#organizationlogo"},"founder":{"@id":"https://refactoring.guru/#founder"},"sameAs":["https://www.facebook.com/refactoring.guru","https://twitter.com/RefactoringGuru","https://github.com/RefactoringGuru"]},{"@type":"WebSite","@id":"https://refactoring.guru/#website","url":"https://refactoring.guru/","name":"Refactoring.Guru","description":"Refactoring.Guru makes it easy for you to discover everything you need to know about refactoring, design patterns, SOLID principles, and other smart programming topics.","author":{"@id":"https://refactoring.guru/#founder"},"publisher":{"@id":"https://refactoring.guru/#organization"},"copyrightYear":2014},{"@type":"WebPage","@id":"https://refactoring.guru/design-patterns/composite#webpage","url":"https://refactoring.guru/design-patterns/composite","inLanguage":"en","name":"Composite","description":"Composite is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects.","isPartOf":{"@id":"https://refactoring.guru#website"},"breadcrumb":{"@id":"https://refactoring.guru/design-patterns/composite#breadcrumb"},"primaryImageOfPage":{"@id":"https://refactoring.guru/design-patterns/composite#primaryimage"},"image":{"@type":"ImageObject","@id":"https://refactoring.guru/design-patterns/composite#primaryimage","url":"https://refactoring.guru/images/patterns/content/composite/composite-3x.png","width":1920,"height":1200}},{"@type":"Article","@id":"https://refactoring.guru/design-patterns/composite#article","isPartOf":{"@id":"https://refactoring.guru/design-patterns/composite#webpage"},"mainEntityOfPage":{"@id":"https://refactoring.guru/design-patterns/composite#webpage"},"author":{"@id":"https://refactoring.guru#founder"},"publisher":{"@id":"https://refactoring.guru#organization"},"headline":"Composite","datePublished":"2024-01-01","dateModified":"2025-01-01","articleSection":"Design Patterns","image":{"@id":"https://refactoring.guru/design-patterns/composite#primaryimage"}},{"@type":"BreadcrumbList","@id":"https://refactoring.guru/design-patterns/composite#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://refactoring.guru"},{"@type":"ListItem","position":2,"name":"Design Patterns","item":"https://refactoring.guru/design-patterns"},{"@type":"ListItem","position":3,"name":"Structural Patterns","item":"https://refactoring.guru/design-patterns/structural-patterns"}]}] }
    </script>

    <script>
function extend(){var extended={};var deep=false;var i=0;var length=arguments["length"];if(Object["prototype"]["toString"]["call"](arguments[0])=== '[object Boolean]'){deep= arguments[0];i++};var merge=function(obj){for(var prop in obj){if(Object["prototype"]["hasOwnProperty"]["call"](obj,prop)){if(deep&& Object["prototype"]["toString"]["call"](obj[prop])=== '[object Object]'){extended[prop]= extend(true,extended[prop],obj[prop])}else {extended[prop]= obj[prop]}}}};for(;i< length;i++){var obj=arguments[i];merge(obj)};return extended}
function defer(method) {if (window.jQuery) {method();} else {setTimeout(function() { defer(method) }, 50);}}
</script>
<script>
+function(sd){sd = (typeof sd === "string") ? JSON.parse(atob(sd)) : sd;for(var property in sd){if(window[property]!== null&&  typeof window[property]=== 'object'){window[property]= extend(true,window[property],sd[property])}else {window[property]= sd[property]}}}("eyJsb2NhbGUiOiJlbiIsImxvY2FsZV9wcmVmaXgiOiIiLCJsb2NhbGl6ZWRfdXJsX3ByZWZpeCI6Imh0dHBzOlwvXC9yZWZhY3RvcmluZy5ndXJ1XC8iLCJ1cmxfcHJlZml4IjoiaHR0cHM6XC9cL3JlZmFjdG9yaW5nLmd1cnVcLyIsImxvY2FsaXplZF91cmxfcHJlZml4X20iOiJodHRwczpcL1wvcmVmYWN0b3JpbmcuZ3VydVwvIiwidXJsX3ByZWZpeF9tIjoiaHR0cHM6XC9cL3JlZmFjdG9yaW5nLmd1cnVcLyIsInVzZXJfZWNob19hbGlhcyI6InJlZmFjdG9yaW5nIiwidXNlcl9lY2hvX2hvc3QiOiJmZWVkYmFjay5yZWZhY3RvcmluZy5ndXJ1IiwidXNlcl9lY2hvX3ByaXZhdGVfZm9ydW0iOiIyIiwidXNlcl9lY2hvX2xvY2FsZSI6ImVuIiwidXNlcl9lY2hvX3B1YmxpY19mb3J1bSI6IjMiLCJ1c2VyX2VjaG9fcHVibGljX2ZvcnVtX3VybCI6Imh0dHBzOlwvXC9mZWVkYmFjay5yZWZhY3RvcmluZy5ndXJ1XC8iLCJ1c2VyX2VjaG9fc3NvX3Rva2VuIjoiIn0=");
</script>

<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
            gtag('set', 'linker', {'domains': ["refactoring.guru,refactoringguru.cn"]});
        gtag('config', 'G-SR8Y3GYQYC', {
        // Disable default page view, because we're going to report them on our own.
        // This is done to report traffic on localized domains as part of the main website traffic
        // See the Chinese overrides below.
        send_page_view: false,
    });
</script>

<script>
    (() => {
        // On first page view after returning from social network, we need to send the social login event.
        (function detectSocialLogin() {
            let getCookie = function (name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
                }
                return null;
            };
            window.social_login_provider = window.social_login_provider || getCookie('social_login_provider');
            if (window.social_login_provider) {
                gtag('set', {referrer: null});
                gtag('event', 'login', {"method": window.social_login_provider});
                // Delete cookie.
                document.cookie = 'social_login_provider=; Path=/; Max-Age=-99999999;';
            }
        })();

        function trackPageView(location, title) {
            location = location || document.location.href;
            title = title || document.title;

            // This is show on https://refactoringguru.cn/ and alike.
            if (typeof window.analytics_path_prefix === 'string') {
                if (/^(https?:\/\/[^\/]+?)\/$/.test(location)) {
                    location = location.replace(/(https?:\/\/[^\/]+?)\//, '$1' + window.analytics_path_prefix);
                } else {
                    location = location.replace(/(https?:\/\/[^\/]+?)\//, '$1' + window.analytics_path_prefix + '/');
                }
                gtag('set', {
                    'page_location': location
                });
            }

            // This is show on https://refactoring.guru/zh/login and alike.
            if (typeof window.analytics_location_prefix === 'string') {
                location = location.replace(/(https?:\/\/[^\/]+?)\//, window.analytics_location_prefix);
                gtag('set', {
                    'page_location': location
                });
            }

            gtag('event', 'page_view', {
                page_location: location,
                page_title: title,
                locale: window.locale ?? 'en'
            });
        }

        if (window.loadContent) {
            window.onPageLoad = window.onPageLoad || [];
            window.onPageLoad.push({
                func: function (context) {
                    trackPageView(window.location.origin + context.canonicalPath, context.title);
                },
                afterAll: true,
            });
        }
        else {
            trackPageView();
        }
    })();
</script>


</head>
<body class="locale-en   announcement   composite" data-body_class="composite">

<div class="body-holder">

            <div class="announcement-block announcement-block-christmas prom" data-id="DIDP-announcement" data-creative-id="en" data-position="top">
    <span class="a1"></span>
    <span class="a2"></span>
    <span class="a3"></span>
    <span class="a4"></span>
    <span class="a5"></span>

            <a href="/store">
            <img src="/images/content-public/ann/winter/snowman.svg?id=2a010474a6b41aae4c46ce19e99672dc" loading="lazy" style="width: 32px; height:32px;vertical-align: middle;">
            WINTER SALE IS ON!
            <img src="/images/content-public/ann/winter/sleigh.svg?id=13f4b31b86b1b32313557ad65c13b7e2" loading="lazy" style="width: 32px; height:32px;vertical-align: middle;">
        </a>
    
    <div class="snowflakes">
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
    </div>
</div>




    
    <div class="cart-placeholder">
    <div class="cart-block-container" style="display:none">
        <div class="cart-block btn-group">
            <a href="#checkout" class="btn cart open-checkout">
                <span class="cart-text"></span>&nbsp;<strong class="cart-total font-money"></strong>
            </a><a href="#checkout" class="btn btn-secondary checkout open-checkout"><i class="fa fa-shopping-cart" aria-hidden="true"></i> <span class="btn-text-span d-none d-sm-inline-block d-lg-none d-hg-inline-block"></span></a>
        </div>
    </div>
</div>
    <main role="main" class="main-content top-content center-content " data-page_class="">
        <div class="main-content-container center-content-container">
                        <div class="pattern page text">
<article>
    <div class="breadcrumb">
                                    <a class="home" href="/"><i class="fa fa-home" aria-hidden="true"></i></a>
                                                / <a class="type" href="/design-patterns">Design Patterns</a>
                                                / <a class="type" href="/design-patterns/structural-patterns">Structural Patterns</a>
                        </div>
    <h1 class="title">Composite</h1>

    <script type="text/javascript">
        // Shorten examples titles for users.
        var h1 = document.getElementsByTagName("H1")[0];
        if (h1.offsetHeight > 160) {
            h1.className += ' smaller';
        }

        // Small beautification for pattern examples.
        var title = h1.innerHTML;
        title = title.replace(/^(Java|C\+\+|C#|PHP|Python|Ruby|Delphi): (.*)$/, '<strong>$1:</strong> $2');
        h1.innerHTML = title;
    </script>

            <div class="aka">
            Also known as: <span style="display:inline-block">Object Tree</span>
        </div>
    
    

    <div class="section intent">
<h2 id="intent"><i class="fa fa-flip-horizontal fa-comment-alt-dots" aria-hidden="true"></i> Intent</h2>
<p><strong>Composite</strong> is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects.</p>
<figure class="image"><img src="/images/patterns/content/composite/composite.png?id=73bcf0d94db360b636cd745f710d19db" alt="Composite design pattern" width="640" srcset="/images/patterns/content/composite/composite-2x.png?id=8847e6f8e2cb892ed2229faba83bd1b7 2x" /></figure>
</div>
<div class="section problem">
<h2 id="problem"><i class="fa fa-frown" aria-hidden="true"></i> Problem</h2>
<p>Using the Composite pattern makes sense only when the core model of your app can be represented as a tree.</p>
<p>For example, imagine that you have two types of objects: <code>Products</code> and <code>Boxes</code>. A <code>Box</code> can contain several <code>Products</code> as well as a number of smaller <code>Boxes</code>. These little <code>Boxes</code> can also hold some <code>Products</code> or even smaller <code>Boxes</code>, and so on.</p>
<p>Say you decide to create an ordering system that uses these classes. Orders could contain simple products without any wrapping, as well as boxes stuffed with products...and other boxes. How would you determine the total price of such an order?</p>
<figure class="image"><img src="/images/patterns/diagrams/composite/problem-en.png?id=3320d7ddc5bdc3e43752bb4393710794" alt="Structure of a complex order" width="370" srcset="/images/patterns/diagrams/composite/problem-en-2x.png?id=5c7d443ccce3e46c4308d43fd1e51cca 2x" loading="lazy" /><figcaption>
<p>An order might comprise various products, packaged in boxes, which are packaged in bigger boxes and so on. The whole structure looks like an upside down tree.</p>
</figcaption></figure>
<p>You could try the direct approach: unwrap all the boxes, go over all the products and then calculate the total. That would be doable in the real world; but in a program, it’s not as simple as running a loop. You have to know the classes of <code>Products</code> and <code>Boxes</code> you’re going through, the nesting level of the boxes and other nasty details beforehand. All of this makes the direct approach either too awkward or even impossible.</p>
</div>
<div class="section solution">
<h2 id="solution"><i class="fa fa-smile-beam" aria-hidden="true"></i> Solution</h2>
<p>The Composite pattern suggests that you work with <code>Products</code> and <code>Boxes</code> through a common interface which declares a method for calculating the total price.</p>
<p>How would this method work? For a product, it’d simply return the product’s price. For a box, it’d go over each item the box contains, ask its price and then return a total for this box. If one of these items were a smaller box, that box would also start going over its contents and so on, until the prices of all inner components were calculated. A box could even add some extra cost to the final price, such as packaging cost.</p>
<figure class="image"><img src="/images/patterns/content/composite/composite-comic-1-en.png?id=5510969e5584e7c0cb65d533901bb8f6" alt="Solution suggested by the Composite pattern" width="600" srcset="/images/patterns/content/composite/composite-comic-1-en-2x.png?id=e2f3fb69d636c211520c2528be94f251 2x" loading="lazy" /><figcaption>
<p>The Composite pattern lets you run a behavior recursively over all components of an object tree.</p>
</figcaption></figure>
<p>The greatest benefit of this approach is that you don’t need to care about the concrete classes of objects that compose the tree. You don’t need to know whether an object is a simple product or a sophisticated box. You can treat them all the same via the common interface. When you call a method, the objects themselves pass the request down the tree.</p>
</div>
<div class="section analogy">
<h2 id="analogy"><i class="fa fa-car-side" aria-hidden="true"></i> Real-World Analogy</h2>
<figure class="image"><img src="/images/patterns/diagrams/composite/live-example.png?id=548a7cec45b493af66e8bfe524a137d3" alt="An example of a military structure" width="280" srcset="/images/patterns/diagrams/composite/live-example-2x.png?id=b555458f20fc30425ae6dada5da492af 2x" loading="lazy" /><figcaption>
<p>An example of a military structure.</p>
</figcaption></figure>
<p>Armies of most countries are structured as hierarchies. An army consists of several divisions; a division is a set of brigades, and a brigade consists of platoons, which can be broken down into squads. Finally, a squad is a small group of real soldiers. Orders are given at the top of the hierarchy and passed down onto each level until every soldier knows what needs to be done.</p>
</div>
<div class="section structure-container">
<h2 id="structure"><i class="fa fa-sitemap" aria-hidden="true"></i> Structure</h2>
<div class="structure">
<div class="struct-image1 struct-image">
<figure class="image"><img class="structure-img-non-indexed d-none d-xl-block" src="/images/patterns/diagrams/composite/structure-en.png?id=b7f114558b594dfb220d225398b2b744" alt="Structure of the Composite design pattern" width="360" srcset="/images/patterns/diagrams/composite/structure-en-2x.png?id=fc41be8ae17c7250ea6d29632a239ba4 2x" loading="lazy" /><img class="structure-img-indexed d-xl-none" src="/images/patterns/diagrams/composite/structure-en-indexed.png?id=9fbce571969f4bc9bb57ee4a7d786852" alt="Structure of the Composite design pattern" width="400" srcset="/images/patterns/diagrams/composite/structure-en-indexed-2x.png?id=a5bbb62b1bc218bc52615bacf3fb3b73 2x" loading="lazy" /></figure>
</div>
<ol><li class="struct-li1">
<p>The <strong>Component</strong> interface describes operations that are common to both simple and complex elements of the tree.</p>
</li>
<li class="struct-li2">
<p>The <strong>Leaf</strong> is a basic element of a tree that doesn’t have sub-elements.</p>
<p>Usually, leaf components end up doing most of the real work, since they don’t have anyone to delegate the work to.</p>
</li>
<li class="struct-li3">
<p>The <strong>Container</strong> (aka <em>composite</em>) is an element that has sub-elements: leaves or other containers. A container doesn’t know the concrete classes of its children. It works with all sub-elements only via the component interface.</p>
<p>Upon receiving a request, a container delegates the work to its sub-elements, processes intermediate results and then returns the final result to the client.</p>
</li>
<li class="struct-li4">
<p>The <strong>Client</strong> works with all elements through the component interface. As a result, the client can work in the same way with both simple or complex elements of the tree.</p>
</li></ol>
<style structure type="text/css" >
@media (min-width: 1200px) {
.structure {
margin: 0;
width: auto;
height: 480px;
}

.struct-image1 {
left: 230px;
top: 10px;
}

.struct-li1 {
left: 0px;
top: 90px;
width: 220px;
}

.struct-li2 {
left: 0px;
top: 230px;
width: 220px;
}

.struct-li3 {
left: 600px;
top: 170px;
width: 250px;
}

.struct-li4 {
left: 360px;
top: -10px;
width: 210px;
}
}

</style>
</div></div>
<div class="section pseudocode">
<h2 id="pseudocode"><i class="fa fa-hashtag" aria-hidden="true"></i> Pseudocode</h2>
<p>In this example, the <strong>Composite</strong> pattern lets you implement stacking of geometric shapes in a graphical editor.</p>
<figure class="image"><img src="/images/patterns/diagrams/composite/example.png?id=98ba81d07c979038dd2ebf3c83a2e19f" alt="Structure of the Composite example" width="370" srcset="/images/patterns/diagrams/composite/example-2x.png?id=d21edef39d3792e8a4c6736727ac7305 2x" loading="lazy" /><figcaption>
<p>The geometric shapes editor example.</p>
</figcaption></figure>
<p>The <code>CompoundGraphic</code> class is a container that can comprise any number of sub-shapes, including other compound shapes. A compound shape has the same methods as a simple shape. However, instead of doing something on its own, a compound shape passes the request recursively to all its children and “sums up” the result.</p>
<p>The client code works with all shapes through the single interface common to all shape classes. Thus, the client doesn’t know whether it’s working with a simple shape or a compound one. The client can work with very complex object structures without being coupled to concrete classes that form that structure.</p>
<figure class="code">
<pre class="code" lang="pseudocode">// The component interface declares common operations for both
// simple and complex objects of a composition.
interface Graphic is
    method move(x, y)
    method draw()

// The leaf class represents end objects of a composition. A
// leaf object can't have any sub-objects. Usually, it's leaf
// objects that do the actual work, while composite objects only
// delegate to their sub-components.
class Dot implements Graphic is
    field x, y

    constructor Dot(x, y) { ... }

    method move(x, y) is
        this.x += x, this.y += y

    method draw() is
        // Draw a dot at X and Y.

// All component classes can extend other components.
class Circle extends Dot is
    field radius

    constructor Circle(x, y, radius) { ... }

    method draw() is
        // Draw a circle at X and Y with radius R.

// The composite class represents complex components that may
// have children. Composite objects usually delegate the actual
// work to their children and then &quot;sum up&quot; the result.
class CompoundGraphic implements Graphic is
    field children: array of Graphic

    // A composite object can add or remove other components
    // (both simple or complex) to or from its child list.
    method add(child: Graphic) is
        // Add a child to the array of children.

    method remove(child: Graphic) is
        // Remove a child from the array of children.

    method move(x, y) is
        foreach (child in children) do
            child.move(x, y)

    // A composite executes its primary logic in a particular
    // way. It traverses recursively through all its children,
    // collecting and summing up their results. Since the
    // composite's children pass these calls to their own
    // children and so forth, the whole object tree is traversed
    // as a result.
    method draw() is
        // 1. For each child component:
        //     - Draw the component.
        //     - Update the bounding rectangle.
        // 2. Draw a dashed rectangle using the bounding
        // coordinates.


// The client code works with all the components via their base
// interface. This way the client code can support simple leaf
// components as well as complex composites.
class ImageEditor is
    field all: CompoundGraphic

    method load() is
        all = new CompoundGraphic()
        all.add(new Dot(1, 2))
        all.add(new Circle(5, 3, 10))
        // ...

    // Combine selected components into one complex composite
    // component.
    method groupSelected(components: array of Graphic) is
        group = new CompoundGraphic()
        foreach (component in components) do
            group.add(component)
            all.remove(component)
        all.add(group)
        // All components will be drawn.
        all.draw()
</pre>
</figure>
</div>
<div class="section applicability-container">
<h2 id="applicability"><i class="fa fa-lightbulb-on" aria-hidden="true"></i> Applicability</h2>
<div class="applicability">
<div class="applicability-problem">
<p><i class="fa fa-fw fa-bug" aria-hidden="true"></i> Use the Composite pattern when you have to implement a tree-like object structure.</p>
</div><div class="applicability-solution">
<p><i class="fa fa-fw fa-bolt" aria-hidden="true"></i> The Composite pattern provides you with two basic element types that share a common interface: simple leaves and complex containers. A container can be composed of both leaves and other containers. This lets you construct a nested recursive object structure that resembles a tree.</p>
</div>
<div class="applicability-problem">
<p><i class="fa fa-fw fa-bug" aria-hidden="true"></i> Use the pattern when you want the client code to treat both simple and complex elements uniformly.</p>
</div><div class="applicability-solution">
<p><i class="fa fa-fw fa-bolt" aria-hidden="true"></i> All elements defined by the Composite pattern share a common interface. Using this interface, the client doesn’t have to worry about the concrete class of the objects it works with.</p>
</div>
</div></div>
<div class="section checklist">
<h2 id="checklist"><i class="fa fa-clipboard-list-check" aria-hidden="true"></i> How to Implement</h2>
<ol>
<li>
<p>Make sure that the core model of your app can be represented as a tree structure. Try to break it down into simple elements and containers. Remember that containers must be able to contain both simple elements and other containers.</p>
</li>
<li>
<p>Declare the component interface with a list of methods that make sense for both simple and complex components.</p>
</li>
<li>
<p>Create a leaf class to represent simple elements. A program may have multiple different leaf classes.</p>
</li>
<li>
<p>Create a container class to represent complex elements. In this class, provide an array field for storing references to sub-elements. The array must be able to store both leaves and containers, so make sure it’s declared with the component interface type.</p>
<p>While implementing the methods of the component interface, remember that a container is supposed to be delegating most of the work to sub-elements.</p>
</li>
<li>
<p>Finally, define the methods for adding and removal of child elements in the container.</p>
<p>Keep in mind that these operations can be declared in the component interface. This would violate the <em>Interface Segregation Principle</em> because the methods will be empty in the leaf class. However, the client will be able to treat all the elements equally, even when composing the tree.</p>
</li>
</ol>
</div>
<div class="section pros-cons">
<h2 id="pros-cons"><i class="fa fa-balance-scale" aria-hidden="true"></i> Pros and Cons</h2>
<div class="row"><div class="col-sm-6">
<ul>
<li>
<i class="fa fa-fw fa-check" aria-hidden="true"></i> You can work with complex tree structures more conveniently: use polymorphism and recursion to your advantage.</li>
<li>
<i class="fa fa-fw fa-check" aria-hidden="true"></i> <em>Open/Closed Principle</em>. You can introduce new element types into the app without breaking the existing code, which now works with the object tree.</li>
</ul>
</div><div class="col-sm-6">
<ul>
<li>
<i class="fa fa-fw fa-times" aria-hidden="true"></i> It might be difficult to provide a common interface for classes whose functionality differs too much. In certain scenarios, you’d need to overgeneralize the component interface, making it harder to comprehend.</li>
</ul>
</div></div></div>
<div class="section relations">
<h2 id="relations"><i class="fa fa-exchange-alt" aria-hidden="true"></i> Relations with Other Patterns</h2>
<ul>
<li>
<p>You can use <a href="/design-patterns/builder">Builder</a> when creating complex <a href="/design-patterns/composite">Composite</a> trees because you can program its construction steps to work recursively.</p>
</li>
<li>
<p><a href="/design-patterns/chain-of-responsibility">Chain of Responsibility</a> is often used in conjunction with <a href="/design-patterns/composite">Composite</a>. In this case, when a leaf component gets a request, it may pass it through the chain of all of the parent components down to the root of the object tree.</p>
</li>
<li>
<p>You can use <a href="/design-patterns/iterator">Iterators</a> to traverse <a href="/design-patterns/composite">Composite</a> trees.</p>
</li>
<li>
<p>You can use <a href="/design-patterns/visitor">Visitor</a> to execute an operation over an entire <a href="/design-patterns/composite">Composite</a> tree.</p>
</li>
<li>
<p>You can implement shared leaf nodes of the <a href="/design-patterns/composite">Composite</a> tree as <a href="/design-patterns/flyweight">Flyweights</a> to save some RAM.</p>
</li>
<li>
<p><a href="/design-patterns/composite">Composite</a> and <a href="/design-patterns/decorator">Decorator</a> have similar structure diagrams since both rely on recursive composition to organize an open-ended number of objects.</p>
<p>A <em>Decorator</em> is like a <em>Composite</em> but only has one child component. There’s another significant difference: <em>Decorator</em> adds additional responsibilities to the wrapped object, while <em>Composite</em> just “sums up” its children’s results.</p>
<p>However, the patterns can also cooperate: you can use <em>Decorator</em> to extend the behavior of a specific object in the <em>Composite</em> tree.</p>
</li>
<li>
<p>Designs that make heavy use of <a href="/design-patterns/composite">Composite</a> and <a href="/design-patterns/decorator">Decorator</a> can often benefit from using <a href="/design-patterns/prototype">Prototype</a>. Applying the pattern lets you clone complex structures instead of re-constructing them from scratch.</p>
</li>
</ul>
</div>
<div class="section implementations">
<h2 id="implementations"><i class="fa fa-code" aria-hidden="true"></i> Code Examples</h2>
<p><a href="/design-patterns/composite/csharp/example" title="Composite in C#" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/csharp.svg?id=da64592defc6e86d57c39c66e9de3e58" alt="Composite in C#" /></a>
<a href="/design-patterns/composite/cpp/example" title="Composite in C++" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/cpp.svg?id=f7782ed8b8666246bfcc3f8fefc3b858" alt="Composite in C++" /></a>
<a href="/design-patterns/composite/go/example" title="Composite in Go" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/go.svg?id=1a89927eb99b1ea3fde7701d97970aca" alt="Composite in Go" /></a>
<a href="/design-patterns/composite/java/example" title="Composite in Java" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/java.svg?id=e6d87e2dca08c953fe3acd1275ed4f4e" alt="Composite in Java" /></a>
<a href="/design-patterns/composite/php/example" title="Composite in PHP" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/php.svg?id=be1906eb26b71ec1d3b93720d6156618" alt="Composite in PHP" /></a>
<a href="/design-patterns/composite/python/example" title="Composite in Python" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/python.svg?id=6d815d43c0f7050a1151b43e51569c9f" alt="Composite in Python" /></a>
<a href="/design-patterns/composite/ruby/example" title="Composite in Ruby" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/ruby.svg?id=b065b718c914bf8e960ef731600be1eb" alt="Composite in Ruby" /></a>
<a href="/design-patterns/composite/rust/example" title="Composite in Rust" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/rust.svg?id=1f5698a4b5ae23fe79413511747e4a87" alt="Composite in Rust" /></a>
<a href="/design-patterns/composite/swift/example" title="Composite in Swift" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/swift.svg?id=0b716c2d52ec3a48fbe91ac031070c1d" alt="Composite in Swift" /></a>
<a href="/design-patterns/composite/typescript/example" title="Composite in TypeScript" class="prog-lang-link"><img width="53" height="53" loading="lazy" src="/images/patterns/icons/typescript.svg?id=2239d0f16cb703540c205dd8cb0c0cb7" alt="Composite in TypeScript" /></a></p>
</div>


    <div class="banner-set2" id="book-promo">
            <div class="prom banner-content banner-bg banner-striped banner-with-image" data-id="DP: 1: Support our free website and own the eBook!" data-creative-id="standard-en" data-position="content_bottom">
                <div class="banner-image">
                    <a href="/design-patterns/book">
                        <img width="200" height="200" loading="lazy" src="/images/patterns/banners/patterns-book-banner-3.png?id=7d445df13c80287beaab234b4f3b698c" srcset="/images/patterns/banners/patterns-book-banner-3-2x.png?id=0cc3f77ab421d1a5c02ee46488231c3a 2x">
                    </a>
                </div>

                <div class="banner-text">
                    <h3 class="title">Support our free website and own the eBook!</h3>
                    <ul style="font-size: 14px;">
                        <li style="margin: 0;">22 design patterns and 8 principles explained in depth.</li>
                        <li style="margin: 0;">409 well-structured, easy to read, jargon-free pages.</li>
                        <li style="margin: 0;">225 clear and helpful illustrations and diagrams.</li>
                        <li style="margin: 0;">An archive with code examples in 11 languages.</li>
                        <li style="margin: 0;">All devices supported: PDF/EPUB/MOBI/KFX formats.</li>
                    </ul>
                    <a class="btn btn-secondary" href="/design-patterns/book"><i class="fa fa-book" aria-hidden="true"></i> Learn more…</a>
                </div>
            </div>
        </div>

    </article>

<nav class="prev-next">
                    <div class="next">
                <h4>Read next</h4>
                <a rel="next" href="/design-patterns/decorator" class="btn btn-primary">Decorator&nbsp;<span class="fa fa-arrow-right"></span></a>
            </div>
                            <div class="prev">
                <h4>Return</h4>
                <a rel="prev" href="/design-patterns/bridge" class="btn btn-default"><span class="fa fa-arrow-left"></span>&nbsp;Bridge </a>
            </div>
            </nav>
</div>

<aside class="feature content-secondary">
    <div class="prom banner-sidebar banner-removable banner-removable-patterns" data-id="DP: Sidebar" data-creative-id="standard-sidebar-en" data-position="sidebar">
        <div class="banner-inner">
            <div class="image3d-book-right">
                <div class="image3d-cover" style="background: #0b3752;">
                    <a href="/design-patterns/book">
                        <img width="250" height="375" loading="lazy" src="/images/patterns/book/web-cover-en.png?id=328861769fd11617674e3b8a7e2dd9e7" srcset="/images/patterns/book/web-cover-en-2x.png?id=02940141c5652ed5a426d87390b16366 2x">
                    </a>
                </div>
            </div>
            <div style="margin-top: 1rem">
                <p class="text-center" >This article is a part of our eBook<br/><strong>Dive Into Design Patterns</strong>.</p>
                <a href="/design-patterns/book" class="btn btn-secondary btn-block"><i class="fa fa-book" aria-hidden="true"></i> Learn more…</a>
            </div>
        </div>
    </div>


</aside>
                    </div>
    </main>

    <aside class="sidebar main-menu">
    <div class="main-menu-controls">
        <button class="navigation-toggle"><i class="fa fa-fw fa-times"></i></button>
    </div>
    <div class="main-menu-list-wrapper nano">
        <div class="main-menu-list nano-content">
            <a class="menu-brand" href="/">
                                    <img width=200 height=241 loading="lazy" alt="Refactoring.Guru" src="/images/content-public/logos/logo-new-winter.png?id=85470d71f9cbeab1161d5cabc2e8296a" srcset="/images/content-public/logos/logo-new-winter-2x.png?id=f038fc3f89470da5a11245482c5e75c1 2x">
                            </a>

            <div class="menu-container" style="position: relative">
                                <ul class="menu-list trail">
                            <li class="featured">
            <a href="/store">
                <i class="fa fa-fw fa-star" aria-hidden="true"></i> Premium Content
            </a>
    
            <ul >
                            <li class="featured menu-fs15">
            <a href="/design-patterns/book">
                <i class="fa fa-fw fa-book" aria-hidden="true"></i> Design Patterns eBook
            </a>
    
    
            </li>
                                <li class="featured menu-fs15">
            <a href="/refactoring/course">
                <i class="fa fa-fw fa-graduation-cap" aria-hidden="true"></i> Refactoring Course
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring">
                <i class="fa fa-fw fa-scissors" aria-hidden="true"></i> Refactoring
            </a>
    
            <ul >
                            <li class="">
            <a href="/refactoring/what-is-refactoring">
                What is Refactoring
            </a>
    
            <ul >
                            <li class="">
            <a href="/refactoring/what-is-refactoring">
                Clean code
            </a>
    
    
            </li>
                                <li class="">
            <a href="/refactoring/technical-debt">
                Technical debt
            </a>
    
    
            </li>
                                <li class="">
            <a href="/refactoring/when">
                When to refactor
            </a>
    
    
            </li>
                                <li class="">
            <a href="/refactoring/how-to">
                How to refactor
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/catalog">
                Catalog
            </a>
    
    
            </li>
                                <li class="">
            <a href="/refactoring/smells">
                Code Smells
            </a>
    
            <ul >
                            <li class="">
            <a href="/refactoring/smells/bloaters">
                Bloaters
            </a>
    
            <ul >
                            <li class="">
            <a href="/smells/long-method">
                Long Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/large-class">
                Large Class
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/primitive-obsession">
                Primitive Obsession
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/long-parameter-list">
                Long Parameter List
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/data-clumps">
                Data Clumps
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/smells/oo-abusers">
                Object-Orientation Abusers
            </a>
    
            <ul >
                            <li class="">
            <a href="/smells/switch-statements">
                Switch Statements
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/temporary-field">
                Temporary Field
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/refused-bequest">
                Refused Bequest
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/alternative-classes-with-different-interfaces">
                Alternative Classes with Different Interfaces
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/smells/change-preventers">
                Change Preventers
            </a>
    
            <ul >
                            <li class="">
            <a href="/smells/divergent-change">
                Divergent Change
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/shotgun-surgery">
                Shotgun Surgery
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/parallel-inheritance-hierarchies">
                Parallel Inheritance Hierarchies
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/smells/dispensables">
                Dispensables
            </a>
    
            <ul >
                            <li class="">
            <a href="/smells/comments">
                Comments
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/duplicate-code">
                Duplicate Code
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/lazy-class">
                Lazy Class
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/data-class">
                Data Class
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/dead-code">
                Dead Code
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/speculative-generality">
                Speculative Generality
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/smells/couplers">
                Couplers
            </a>
    
            <ul >
                            <li class="">
            <a href="/smells/feature-envy">
                Feature Envy
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/inappropriate-intimacy">
                Inappropriate Intimacy
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/message-chains">
                Message Chains
            </a>
    
    
            </li>
                                <li class="">
            <a href="/smells/middle-man">
                Middle Man
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/smells/other">
                Other Smells
            </a>
    
            <ul >
                            <li class="">
            <a href="/smells/incomplete-library-class">
                Incomplete Library Class
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/techniques">
                Refactorings
            </a>
    
            <ul >
                            <li class="">
            <a href="/refactoring/techniques/composing-methods">
                Composing Methods
            </a>
    
            <ul >
                            <li class="">
            <a href="/extract-method">
                Extract Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/inline-method">
                Inline Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/extract-variable">
                Extract Variable
            </a>
    
    
            </li>
                                <li class="">
            <a href="/inline-temp">
                Inline Temp
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-temp-with-query">
                Replace Temp with Query
            </a>
    
    
            </li>
                                <li class="">
            <a href="/split-temporary-variable">
                Split Temporary Variable
            </a>
    
    
            </li>
                                <li class="">
            <a href="/remove-assignments-to-parameters">
                Remove Assignments to Parameters
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-method-with-method-object">
                Replace Method with Method Object
            </a>
    
    
            </li>
                                <li class="">
            <a href="/substitute-algorithm">
                Substitute Algorithm
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/techniques/moving-features-between-objects">
                Moving Features between Objects
            </a>
    
            <ul >
                            <li class="">
            <a href="/move-method">
                Move Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/move-field">
                Move Field
            </a>
    
    
            </li>
                                <li class="">
            <a href="/extract-class">
                Extract Class
            </a>
    
    
            </li>
                                <li class="">
            <a href="/inline-class">
                Inline Class
            </a>
    
    
            </li>
                                <li class="">
            <a href="/hide-delegate">
                Hide Delegate
            </a>
    
    
            </li>
                                <li class="">
            <a href="/remove-middle-man">
                Remove Middle Man
            </a>
    
    
            </li>
                                <li class="">
            <a href="/introduce-foreign-method">
                Introduce Foreign Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/introduce-local-extension">
                Introduce Local Extension
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/techniques/organizing-data">
                Organizing Data
            </a>
    
            <ul >
                            <li class="">
            <a href="/self-encapsulate-field">
                Self Encapsulate Field
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-data-value-with-object">
                Replace Data Value with Object
            </a>
    
    
            </li>
                                <li class="">
            <a href="/change-value-to-reference">
                Change Value to Reference
            </a>
    
    
            </li>
                                <li class="">
            <a href="/change-reference-to-value">
                Change Reference to Value
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-array-with-object">
                Replace Array with Object
            </a>
    
    
            </li>
                                <li class="">
            <a href="/duplicate-observed-data">
                Duplicate Observed Data
            </a>
    
    
            </li>
                                <li class="">
            <a href="/change-unidirectional-association-to-bidirectional">
                Change Unidirectional Association to Bidirectional
            </a>
    
    
            </li>
                                <li class="">
            <a href="/change-bidirectional-association-to-unidirectional">
                Change Bidirectional Association to Unidirectional
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-magic-number-with-symbolic-constant">
                Replace Magic Number with Symbolic Constant
            </a>
    
    
            </li>
                                <li class="">
            <a href="/encapsulate-field">
                Encapsulate Field
            </a>
    
    
            </li>
                                <li class="">
            <a href="/encapsulate-collection">
                Encapsulate Collection
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-type-code-with-class">
                Replace Type Code with Class
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-type-code-with-subclasses">
                Replace Type Code with Subclasses
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-type-code-with-state-strategy">
                Replace Type Code with State/Strategy
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-subclass-with-fields">
                Replace Subclass with Fields
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/techniques/simplifying-conditional-expressions">
                Simplifying Conditional Expressions
            </a>
    
            <ul >
                            <li class="">
            <a href="/decompose-conditional">
                Decompose Conditional
            </a>
    
    
            </li>
                                <li class="">
            <a href="/consolidate-conditional-expression">
                Consolidate Conditional Expression
            </a>
    
    
            </li>
                                <li class="">
            <a href="/consolidate-duplicate-conditional-fragments">
                Consolidate Duplicate Conditional Fragments
            </a>
    
    
            </li>
                                <li class="">
            <a href="/remove-control-flag">
                Remove Control Flag
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-nested-conditional-with-guard-clauses">
                Replace Nested Conditional with Guard Clauses
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-conditional-with-polymorphism">
                Replace Conditional with Polymorphism
            </a>
    
    
            </li>
                                <li class="">
            <a href="/introduce-null-object">
                Introduce Null Object
            </a>
    
    
            </li>
                                <li class="">
            <a href="/introduce-assertion">
                Introduce Assertion
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/techniques/simplifying-method-calls">
                Simplifying Method Calls
            </a>
    
            <ul >
                            <li class="">
            <a href="/rename-method">
                Rename Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/add-parameter">
                Add Parameter
            </a>
    
    
            </li>
                                <li class="">
            <a href="/remove-parameter">
                Remove Parameter
            </a>
    
    
            </li>
                                <li class="">
            <a href="/separate-query-from-modifier">
                Separate Query from Modifier
            </a>
    
    
            </li>
                                <li class="">
            <a href="/parameterize-method">
                Parameterize Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-parameter-with-explicit-methods">
                Replace Parameter with Explicit Methods
            </a>
    
    
            </li>
                                <li class="">
            <a href="/preserve-whole-object">
                Preserve Whole Object
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-parameter-with-method-call">
                Replace Parameter with Method Call
            </a>
    
    
            </li>
                                <li class="">
            <a href="/introduce-parameter-object">
                Introduce Parameter Object
            </a>
    
    
            </li>
                                <li class="">
            <a href="/remove-setting-method">
                Remove Setting Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/hide-method">
                Hide Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-constructor-with-factory-method">
                Replace Constructor with Factory Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-error-code-with-exception">
                Replace Error Code with Exception
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-exception-with-test">
                Replace Exception with Test
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/refactoring/techniques/dealing-with-generalization">
                Dealing with Generalization
            </a>
    
            <ul >
                            <li class="">
            <a href="/pull-up-field">
                Pull Up Field
            </a>
    
    
            </li>
                                <li class="">
            <a href="/pull-up-method">
                Pull Up Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/pull-up-constructor-body">
                Pull Up Constructor Body
            </a>
    
    
            </li>
                                <li class="">
            <a href="/push-down-method">
                Push Down Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/push-down-field">
                Push Down Field
            </a>
    
    
            </li>
                                <li class="">
            <a href="/extract-subclass">
                Extract Subclass
            </a>
    
    
            </li>
                                <li class="">
            <a href="/extract-superclass">
                Extract Superclass
            </a>
    
    
            </li>
                                <li class="">
            <a href="/extract-interface">
                Extract Interface
            </a>
    
    
            </li>
                                <li class="">
            <a href="/collapse-hierarchy">
                Collapse Hierarchy
            </a>
    
    
            </li>
                                <li class="">
            <a href="/form-template-method">
                Form Template Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-inheritance-with-delegation">
                Replace Inheritance with Delegation
            </a>
    
    
            </li>
                                <li class="">
            <a href="/replace-delegation-with-inheritance">
                Replace Delegation with Inheritance
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                        </ul>
    
            </li>
                        </ul>
    
            </li>
                                <li class="trail">
            <a href="/design-patterns">
                <i class="fa fa-fw fa-puzzle-piece" aria-hidden="true"></i> Design Patterns
            </a>
    
            <ul >
                            <li class="">
            <a href="/design-patterns/what-is-pattern">
                What is a Pattern
            </a>
    
            <ul >
                            <li class="">
            <a href="/design-patterns/what-is-pattern">
                What's a design pattern?
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/history">
                History of patterns
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/why-learn-patterns">
                Why should I learn patterns?
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/criticism">
                Criticism of patterns
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/classification">
                Classification of patterns
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="">
            <a href="/design-patterns/catalog">
                Catalog
            </a>
    
    
            </li>
                                <li class="menu-third-level">
            <a href="/design-patterns/creational-patterns">
                Creational Patterns
            </a>
    
            <ul >
                            <li class="">
            <a href="/design-patterns/factory-method">
                Factory Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/abstract-factory">
                Abstract Factory
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/builder">
                Builder
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/prototype">
                Prototype
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/singleton">
                Singleton
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="menu-third-level trail">
            <a href="/design-patterns/structural-patterns">
                Structural Patterns
            </a>
    
            <ul >
                            <li class="">
            <a href="/design-patterns/adapter">
                Adapter
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/bridge">
                Bridge
            </a>
    
    
            </li>
                                <li class="trail active">
            <a href="/design-patterns/composite">
                Composite
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/decorator">
                Decorator
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/facade">
                Facade
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/flyweight">
                Flyweight
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/proxy">
                Proxy
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="menu-third-level">
            <a href="/design-patterns/behavioral-patterns">
                Behavioral Patterns
            </a>
    
            <ul >
                            <li class="">
            <a href="/design-patterns/chain-of-responsibility">
                Chain of Responsibility
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/command">
                Command
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/iterator">
                Iterator
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/mediator">
                Mediator
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/memento">
                Memento
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/observer">
                Observer
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/state">
                State
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/strategy">
                Strategy
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/template-method">
                Template Method
            </a>
    
    
            </li>
                                <li class="">
            <a href="/design-patterns/visitor">
                Visitor
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                                <li class="menu-code-examples">
            <a href="/design-patterns/examples">
                Code Examples
            </a>
    
            <ul >
                            <li class="menu-code-examples-item">
            <a href="/design-patterns/csharp">
                C#
            </a>
    
    
            </li>
                                <li class="menu-code-examples-item">
            <a href="/design-patterns/cpp">
                C++
            </a>
    
    
            </li>
                                <li class="menu-code-examples-item">
            <a href="/design-patterns/go">
                Go
            </a>
    
    
            </li>
                                <li class="menu-code-examples-item">
            <a href="/design-patterns/java">
                Java
            </a>
    
    
            </li>
                                <li class="menu-code-examples-item">
            <a href="/design-patterns/php">
                PHP
            </a>
    
    
            </li>
                                <li class="menu-code-examples-item">
            <a href="/design-patterns/python">
                Python
            </a>
    
    
            </li>
                                <li class="menu-code-examples-item">
            <a href="/design-patterns/ruby">
                Ruby
            </a>
    
    
            </li>
                                <li class="menu-code-examples-item">
            <a href="/design-patterns/rust">
                Rust
            </a>
    
    
            </li>
                                <li class="menu-code-examples-item">
            <a href="/design-patterns/swift">
                Swift
            </a>
    
    
            </li>
                                <li class="menu-code-examples-item">
            <a href="/design-patterns/typescript">
                TypeScript
            </a>
    
    
            </li>
                        </ul>
    
            </li>
                        </ul>
    
            </li>
                        </ul>
    
                </div>

            <div class="main-menu-aux-controls">
                <a href="https://refactoring.guru/login" title="Sign in" style=" display: inline-flex; align-items: center; gap: 6px; "><svg style="width: 16px; height: 16px; filter:drop-shadow(0 1px 1px #74261e)" class="inline-block mx-0"  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor"opacity="0.4" d="M352.7 222.4c3.2 1 6.5 1.6 10 1.6l21.3 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-21.3 0c-.8 0-1.7 0-2.5 0c-.9 0-1.7-.1-2.5-.1c-1.7-.1-3.4-.2-5-.4C357.4 414 391.1 512 432 512c44.2 0 80-114.6 80-256S476.2 0 432 0c-40.6 0-74.2 96.9-79.3 222.4z"/><path fill="currentColor"class="fa-primary" d="M320 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM125.7 175.5c9.9-9.9 23.4-15.5 37.5-15.5c1.9 0 3.8 .1 5.6 .3L137.6 254c-9.3 28 1.7 58.8 26.8 74.5l86.2 53.9-25.4 88.8c-4.9 17 5 34.7 22 39.6s34.7-5 39.6-22l28.7-100.4c5.9-20.6-2.6-42.6-20.7-53.9L238 299l30.9-82.4 5.1 12.3C289 264.7 323.9 288 362.7 288l21.3 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-21.3 0c-12.9 0-24.6-7.8-29.5-19.7l-6.3-15c-14.6-35.1-44.1-61.9-80.5-73.1l-48.7-15c-11.1-3.4-22.7-5.2-34.4-5.2c-31 0-60.8 12.3-82.7 34.3L57.4 153.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l23.1-23.1zM91.2 352L32 352c-17.7 0-32 14.3-32 32s14.3 32 32 32l69.6 0c19 0 36.2-11.2 43.9-28.5L157 361.6l-9.5-6c-17.5-10.9-30.5-26.8-37.9-44.9L91.2 352z"/></svg> Sign in</a>
                <a href="https://feedback.refactoring.guru/" class="userecho-public" rel="nofollow" title="Contact us"><i class="fa fa-fw fa-fw fa-envelope" aria-hidden="true"></i> Contact us</a>
            </div>
        </div>
    </div>
</aside>

    <nav class="navigation" role="navigation">
    <div class="navigation-container">
        <a class="navigation-brand" href="/">
            <img alt="Refactoring.Guru"
                 src="/images/content-public/logos/logo-new-mobile.png?id=ea18aa9b032eaa92835ed6d472b03b4a"
                 srcset="/images/content-public/logos/logo-new-mobile-2x.png?id=7ad5648bfd86ae2e8524147a72877c64 2x">
        </a>

        <div class="shop-link d-none d-lg-block" style="display: none !important;">
            <a class="btn btn-md btn-primary btn-featured" href="/store"><svg style="width: 28px; height: 28px; fill: currentColor; display: inline-block; margin-top: -14px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.3.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M356 60l60 20-60 20-20 60-20-60L256 80l60-20L336 0l20 60zM464 208l48 16-48 16-16 48-16-48-48-16 48-16 16-48 16 48zm-243.8-9.8l33 66.9 73.8 10.7 59.8 8.7-43.3 42.2-53.4 52.1 12.6 73.5L313 512l-53.5-28.1-66-34.7-66 34.7L73.9 512l10.2-59.6 12.6-73.5L43.3 326.8 0 284.6l59.8-8.7 73.8-10.7 33-66.9L193.5 144l26.8 54.2zm26.1 114.4l-25-3.6-11.2-22.6-16.7-33.9-16.7 33.9L165.6 309l-25 3.6-37.4 5.4 27.1 26.4 18.1 17.6L144 387l-6.4 37.3 33.5-17.6 22.3-11.7 22.3 11.7 33.5 17.6L242.9 387l-4.3-24.9 18.1-17.6 27.1-26.4-37.4-5.4z"/></svg>
                Shop Now!</a>
        </div>

        <ul class="navigation-menu">
                            <li class="nav-locale dropdown dropdown-locales">
                    <button class="dropdown-toggle" id="dropdownLanguage" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa fa-fw fa-globe" aria-hidden="true"></i> <span class="caption d-none d-lg-inline-block">English</span>
                    </button>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownLanguage">
                                                                                                                        <a href="https://refactoring.guru/design-patterns/composite" class="dropdown-item locale-link active" data-locale="en" title="English">English</a>
                                                                                                                                <a href="https://refactoring.guru/es/design-patterns/composite" class="dropdown-item locale-link " data-locale="es" title="Español">Español</a>
                                                                                                                                <a href="https://refactoring.guru/fr/design-patterns/composite" class="dropdown-item locale-link " data-locale="fr" title="Français">Français</a>
                                                                                                                                <a href="https://refactoring.guru/ja/design-patterns/composite" class="dropdown-item locale-link " data-locale="ja" title="日本語">日本語</a>
                                                                                                                                <a href="https://refactoring.guru/ko/design-patterns/composite" class="dropdown-item locale-link " data-locale="ko" title="한국어">한국어</a>
                                                                                                                                <a href="https://refactoring.guru/pl/design-patterns/composite" class="dropdown-item locale-link " data-locale="pl" title="Polski">Polski</a>
                                                                                                                                <a href="https://refactoring.guru/pt-br/design-patterns/composite" class="dropdown-item locale-link " data-locale="pt-br" title="Português Brasileiro">Português Brasileiro</a>
                                                                                                                                <a href="https://refactoring.guru/ru/design-patterns/composite" class="dropdown-item locale-link " data-locale="ru" title="Русский">Русский</a>
                                                                                                                                <a href="https://refactoring.guru/uk/design-patterns/composite" class="dropdown-item locale-link " data-locale="uk" title="Українська">Українська</a>
                                                                                                                                <a href="https://refactoringguru.cn/design-patterns/composite" class="dropdown-item locale-link " data-locale="zh" title="中文">中文</a>
div>
                </li>
                        <li class="nav-contacts">
                <a class="userecho-private" href="https://feedback.refactoring.guru/?show_feedback_form_private=true" rel="nofollow" title="Contact us">
                    <i class="fa fa-fw fa-envelope" aria-hidden="true"></i> <span class="caption d-none d-xl-inline-block">Contact us</span>
                </a>
            </li>
                            <li class="nav-user">
                    <a href="https://refactoring.guru/login" title="Sign in"><span class="sign-in-icon"><svg style="width: 24px; height: 24px; " class="inline-block "  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor"opacity="0.4" d="M352.7 222.4c3.2 1 6.5 1.6 10 1.6l21.3 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-21.3 0c-.8 0-1.7 0-2.5 0c-.9 0-1.7-.1-2.5-.1c-1.7-.1-3.4-.2-5-.4C357.4 414 391.1 512 432 512c44.2 0 80-114.6 80-256S476.2 0 432 0c-40.6 0-74.2 96.9-79.3 222.4z"/><path fill="currentColor"class="fa-primary" d="M320 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM125.7 175.5c9.9-9.9 23.4-15.5 37.5-15.5c1.9 0 3.8 .1 5.6 .3L137.6 254c-9.3 28 1.7 58.8 26.8 74.5l86.2 53.9-25.4 88.8c-4.9 17 5 34.7 22 39.6s34.7-5 39.6-22l28.7-100.4c5.9-20.6-2.6-42.6-20.7-53.9L238 299l30.9-82.4 5.1 12.3C289 264.7 323.9 288 362.7 288l21.3 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-21.3 0c-12.9 0-24.6-7.8-29.5-19.7l-6.3-15c-14.6-35.1-44.1-61.9-80.5-73.1l-48.7-15c-11.1-3.4-22.7-5.2-34.4-5.2c-31 0-60.8 12.3-82.7 34.3L57.4 153.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l23.1-23.1zM91.2 352L32 352c-17.7 0-32 14.3-32 32s14.3 32 32 32l69.6 0c19 0 36.2-11.2 43.9-28.5L157 361.6l-9.5-6c-17.5-10.9-30.5-26.8-37.9-44.9L91.2 352z"/></svg></span> <span class="account-icon" style="display:none"><svg style="width: 24px; height: 24px; " class="inline-block "  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path fill="currentColor"opacity="0.4" d="M64 270.5l224-196c74.7 65.4 149.4 130.7 224.1 196.1l.4 177.3c.1 35.4-28.6 64.1-64 64.1l-320.4 0c-35.3 0-64-28.6-64-64L64 270.5zM176.1 433.6c.1 .5 .1 1.1 .2 1.6c.2 1 .5 2 .9 3c.8 1.9 2 3.6 3.4 5.1c2.9 2.9 6.9 4.7 11.3 4.7l192 0c8.8 0 16-7.2 16-16c0-44.2-35.8-80-80-80l-64 0c-22.1 0-42.1 9-56.6 23.4c-7.2 7.2-13.1 15.9-17.1 25.4c-2 4.8-3.6 9.8-4.7 15c-.5 2.6-.9 5.3-1.2 7.9c-.1 1.3-.2 2.7-.3 4.1c-.1 1.4-.1 2.7-.1 4.1c0 .6 0 1.1 .1 1.6zm48.2-184.2c-.1 1.1-.2 2.2-.2 3.2c-.1 1.1-.1 2.2-.1 3.3s0 2.2 .1 3.3c.1 1.1 .1 2.2 .2 3.2c.2 2.1 .5 4.3 1 6.4c.9 4.2 2.1 8.2 3.7 12c3.2 7.7 7.9 14.6 13.7 20.3C254.3 312.8 270.3 320 288 320c35.3 0 64-28.7 64-64s-28.7-64-64-64c-17.7 0-33.7 7.2-45.3 18.7c-5.8 5.8-10.5 12.7-13.7 20.3c-1.6 3.8-2.9 7.8-3.7 12c-.4 2.1-.8 4.2-1 6.4z"/><path fill="currentColor"class="fa-primary" d="M309.1 7.9C297-2.6 279-2.6 266.9 7.9l-256 224c-13.3 11.6-14.6 31.9-3 45.2s31.9 14.6 45.2 3L288 74.5 522.9 280.1c13.3 11.6 33.5 10.3 45.2-3s10.3-33.5-3-45.2L512 185.5 512 64c0-17.7-14.3-32-32-32l-32 0c-17.7 0-32 14.3-32 32l0 37.5L309.1 7.9zM352 256a64 64 0 1 0 -128 0 64 64 0 1 0 128 0zm-96 96c-44.2 0-80 35.8-80 80c0 8.8 7.2 16 16 16l192 0c8.8 0 16-7.2 16-16c0-44.2-35.8-80-80-80l-64 0z"/></svg></span> <span class="sign-out-icon" style="display:none"><svg style="width: 24px; height: 24px; " class="inline-block "  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor"opacity="0.4" d="M0 256C0 397.4 35.8 512 80 512c25.3 0 47.8-37.5 62.5-96L128 416c-.5 0-1.1 0-1.6 0c-.6 0-1.1-.1-1.6-.1c-1.1-.1-2.1-.3-3.2-.5c-2.1-.4-4.1-1.1-6-1.9c-3.8-1.6-7.3-4-10.2-6.9s-5.2-6.3-6.9-10.2c-.8-1.9-1.4-3.9-1.9-6c-.2-1.1-.4-2.3-.5-3.5c0-.3 0-.6-.1-.8c0-.2 0-.4 0-.7c0-.4 0-.7 0-.7c0-.5 0-.7 0-.9c0-.3 0-.6 0-.9c0 0 0-.3 0-.7c0-.2 0-.4 0-.7c0-.2 0-.4 .1-.8c0-.3 .1-.6 .1-.9c0-.2 .1-.4 .1-.7c.1-.8 .2-1.2 .3-1.7c.5-2.2 1.1-4.2 1.9-6.1c1.6-3.8 4-7.3 6.9-10.2c5.8-5.8 13.8-9.4 22.6-9.4l26.2 0c3.8-29.6 5.8-62.1 5.8-96c0-18.3-.6-36.1-1.7-53.4c-1.7-1.2-3.4-2.5-4.9-4c-.8-.8-1.6-1.6-2.2-2.5s-1.3-1.7-1.9-2.6c-1.2-1.8-2.1-3.6-2.9-5.5s-1.4-3.9-1.8-5.9c-.2-1-.3-2-.4-3s-.1-2-.2-3c0-8.3 3.1-16.5 9.4-22.8C141 63.1 112.8 0 80 0C35.8 0 0 114.6 0 256z"/><path fill="currentColor"class="fa-primary" d="M416 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM221.7 175.5c9.9-9.9 23.4-15.5 37.5-15.5c1.9 0 3.8 .1 5.6 .3L233.6 254c-9.3 28 1.7 58.8 26.8 74.5l86.2 53.9-25.4 88.8c-4.9 17 5 34.7 22 39.6s34.7-5 39.6-22l28.7-100.4c5.9-20.6-2.6-42.6-20.7-53.9L334 299l30.9-82.4 5.1 12.3C385 264.7 419.9 288 458.7 288l21.3 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-21.3 0c-12.9 0-24.6-7.8-29.5-19.7l-6.3-15c-14.6-35.1-44.1-61.9-80.5-73.1l-48.7-15c-11.1-3.4-22.7-5.2-34.4-5.2c-31 0-60.8 12.3-82.7 34.3l-23.1 23.1c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l23.1-23.1zM187.2 352L128 352c-17.7 0-32 14.3-32 32s14.3 32 32 32l69.6 0c19 0 36.2-11.2 43.9-28.5L253 361.6l-9.5-6c-17.5-10.9-30.5-26.8-37.9-44.9L187.2 352z"/></svg></span> <span class="caption d-none d-xl-inline-block">Sign in</span></a>
                </li>
                        <li class="nav-menu">
                <button class="navigation-toggle"><i class="fa fa-fw fa-bars" aria-hidden="true"></i></button>
            </li>
        </ul>
    </div>
</nav>

    <footer class="footer center-content">
    <div class="footer-container center-content-container">
        <div class="footer-inner container-fluid">
            <div class="row">
                <div class="col-8 col-md-10">
                    <ul class="footer-list footer-list-horizontal">
                        <li><a href="/">Home</a></li>
                        <li><a href="/refactoring">Refactoring</a></li>
                        <li><a href="/design-patterns">Design Patterns</a></li>
                        <li><a href="/store">Premium Content</a></li>
                        <li><a href="https://refactoring.userecho.com/" rel="nofollow" class="userecho-public">Forum</a></li>
                        <li><a href="https://refactoring.userecho.com/" rel="nofollow" class="userecho-private">Contact us</a></li>
                    </ul>
                </div>
                <div class="col-4 col-md-2">
                    <ul class="footer-list footer-list-iconic footer-list-right">
                                                    <li><a href="https://www.facebook.com/refactoring.guru"><i class="fa fa-facebook-official"></i></a></li>
                                                <li><a href="/sendy/form" rel="nofollow"><i class="fa fa-envelope" aria-hidden="true"></i></a></li>
                        <li><a href="https://github.com/RefactoringGuru"><i class="fa fa-github-circled"></i></a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="footer-second">
        <div class="footer-container center-content-container">
            <div class="footer-inner container-fluid">
                <div class="row">
                    <div class="col-12 col-sm-6">
                        <i class="fa fa-fw fa-copyright"></i> 2014-2025 <a href="/">Refactoring.Guru</a>. <span style="white-space: nowrap">All rights reserved.</span><br>
                        <i class="fa fa-fw fa-image"></i> Illustrations by <a href="http://zhart.us/" rel="nofollow"><span style="white-space: nowrap">Dmitry Zhart</span></a>
                    </div>
                    <div class="footer-links-right col-12 col-sm-6 mt-4 mt-sm-0">
                        <ul class="footer-list footer-list-horizontal footer-list-right">
                            <li><a href="/terms"><span>Terms &amp; Conditions</span></a>
                            </li>
                            <li><a href="/privacy-policy"><span>Privacy Policy</span></a>
                            </li>
                            <li><a href="/content-usage-policy"><span>Content Usage Policy</span></a>
                            </li>
                            <li><a href="/site-about"><span>About us</span></a>
                            </li>
                        </ul>
                    </div>
                </div>
                                    <div class="row">
                        <div class="col-12 col-sm-4">
                            <div class="mt-4">
                                                                    <b>Ukrainian office:</b><br>
                                    <object class="fa-fw" style="height: 0.8rem; filter: invert(50%);"  type="image/svg+xml" data="/images/content-public/icons/fa-building.svg?id=afddb5806968b0a9acfc1df75a181234">
                                        <img class="fa-fw" style="height: 0.8rem;" src="/images/content-public/icons/fa-building.svg?id=afddb5806968b0a9acfc1df75a181234" alt="Organization address"/>
                                    </object> FOP Olga Skobeleva<br>
                                    <svg style="width: 16px; height: 16px; margin-right: 1px; fill: currentColor;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M352 192c0-88.4-71.6-160-160-160S32 103.6 32 192c0 15.6 5.4 37 16.6 63.4c10.9 25.9 26.2 54 43.6 82.1c34.1 55.3 74.4 108.2 99.9 140c25.4-31.8 65.8-84.7 99.9-140c17.3-28.1 32.7-56.3 43.6-82.1C346.6 229 352 207.6 352 192zm32 0c0 87.4-117 243-168.3 307.2c-12.3 15.3-35.1 15.3-47.4 0C117 435 0 279.4 0 192C0 86 86 0 192 0S384 86 384 192zm-240 0a48 48 0 1 0 96 0 48 48 0 1 0 -96 0zm48 80a80 80 0 1 1 0-160 80 80 0 1 1 0 160z"/></svg> Abolmasova 7<br>
                                    <span style="margin-left: 21px;">Kyiv, Ukraine, 02002</span><br>
                                    <i class="fa fa-fw fa-envelope"></i>  Email: support@refactoring.guru
                                
                            </div>
                        </div>
                        <div class="col-12 col-sm-4">
                            <div class="mt-4">
                                <b>Spanish office:</b><br>
                                <object class="fa-fw" style="height: 0.8rem; filter: invert(50%);"  type="image/svg+xml" data="/images/content-public/icons/fa-building.svg?id=afddb5806968b0a9acfc1df75a181234">
                                    <img class="fa-fw" style="height: 0.8rem;" src="/images/content-public/icons/fa-building.svg?id=afddb5806968b0a9acfc1df75a181234" alt="Organization address"/>
                                </object> Oleksandr Shvets<br>
                                <svg style="width: 16px; height: 16px; margin-right: 1px; fill: currentColor;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M352 192c0-88.4-71.6-160-160-160S32 103.6 32 192c0 15.6 5.4 37 16.6 63.4c10.9 25.9 26.2 54 43.6 82.1c34.1 55.3 74.4 108.2 99.9 140c25.4-31.8 65.8-84.7 99.9-140c17.3-28.1 32.7-56.3 43.6-82.1C346.6 229 352 207.6 352 192zm32 0c0 87.4-117 243-168.3 307.2c-12.3 15.3-35.1 15.3-47.4 0C117 435 0 279.4 0 192C0 86 86 0 192 0S384 86 384 192zm-240 0a48 48 0 1 0 96 0 48 48 0 1 0 -96 0zm48 80a80 80 0 1 1 0-160 80 80 0 1 1 0 160z"/></svg> Avda Pamplona 64<br>
                                <span style="margin-left: 21px;">Pamplona, Spain, 31009</span><br>
                                <i class="fa fa-fw fa-envelope"></i>  Email: support@refactoring.guru
                            </div>
                        </div>
                    </div>
                            </div>
        </div>
    </div>
</footer>

</div>


    <script type="text/javascript">
        paddleInitIntervalRetryCounter = 0;
        let paddleInitInterval = setInterval(function() {
            if (typeof Paddle !== 'undefined') {
                clearInterval(paddleInitInterval);
                Paddle.Environment.set("production");
                Paddle.Initialize({
                    token: "live_1cc84423e0957bf608c4ad8505b",
                    eventCallback: function(data) {
                        if (data?.type === 'checkout.ping.size') {
                            return;
                        }
                        const ignoredPaddleEvents = [
                            'checkout.loaded',
                            'checkout.closed',
                            'checkout.completed',
                            'checkout.items.updated',
                            'checkout.items.removed',
                            'checkout.customer.created',
                            'checkout.customer.updated',
                            'checkout.customer.removed',
                            'checkout.payment.selected',
                            'checkout.payment.initiated',
                            'checkout.payment.failed',
                            'checkout.discount.applied',
                            'checkout.discount.removed',
                        ]
                        if (!data?.name || !ignoredPaddleEvents.includes(data?.name)) {
                            $.ajax({
                                method: "POST",
                                url: '/ajax/error',
                                data: {
                                    error: 'Paddle client init error.',
                                    order_id: checkout?.storage?.data?.id,
                                    data: data,
                                },
                                dataType: 'json',
                                crossDomain: true,
                                xhrFields: {
                                    withCredentials: true
                                },
                                timeout: CHECKOUT_AJAX_TIMEOUT
                            });
                        }
                    }
                });
            }
            else {
                paddleInitIntervalRetryCounter++;
                if (paddleInitIntervalRetryCounter > 20) {
                    clearInterval(paddleInitInterval);
                }
            }
        }, 500);
    </script>


<script defer>
    var CodeMirrorScripts = ["/js/codemirror.min.js?id=f7ae4adf14bd00338caf8e95da733cc9"];
</script>



    <script>window.loadContent = true;window.loadCart = true;</script>
</body>
</html>
